# -*- coding: utf-8 -*-
"""Copy of Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17LFNkfTH2CqYXbni9iCRREPMIMHVUcxm
"""

from spacy.lang.en import English
#create a nlp object
nlp = English()

# Process a sample text
doc = nlp("The world is a better place with the application of science and technology.")

# Print the text
print(doc.text)

# Import the German language class
from spacy.lang.de import German

# Create a nlp object
nlp = German()

# Process a text.
doc = nlp("Die Welt ist ein besserer Ort für die Anwendung von Wissenschaft und Technologie.")

# Print the text
print(doc.text)

from spacy.lang.es import Spanish

# Create the nlp object
nlp = Spanish()

# Process a text
doc = nlp("El mundo es un lugar mejor con la aplicación de la ciencia y la tecnología.")

#Print the text
print(doc)

from spacy.lang.en import English
#create a nlp object
nlp = English()

# Process a sample text
doc = nlp("The world is a better place with the application of science and technology.")

# Print the text
print(doc.text)

# Select the first token
first_token = doc[0]
# Print the first token
print("First word: ", first_token.text)

# A slice of the Doc for "tree kangaroos"
a_better_place = doc[3:6]
print("The world: ", a_better_place.text)

# A slice of the Doc for "tree kangaroos and narwhales" (without the '.')
the_world = doc[2:13]
print("The World: ", the_world.text)

from spacy.lang.en import English

nlp = English()

# Process the text
doc = nlp(
    "The world is a better place with the application of science and technology."
    "In 1990, more than 60% of people in East Asia were in extreme poverty. "
    "Now less than 4% are."
)

# Iterate over the tokens in the doc
for token in doc:
    # Check if the token resembles a number using `like_num` token attribute
    if token.like_num: 
        # Get the next token in the document
        # The index of the next token in the `doc` is `token.i + 1`
        next_token = doc[token.i + 1]
        # Check if the next token's text equals "%"
        if next_token.text == "%":
            print(f"Percentage found: {token.text}%")

import spacy

# Load the "en_core_web_sm"
nlp = spacy.load('en_core_web_sm')

text = "The world is a better place with the application of science and technology."

# Process the text
doc = nlp(text)

# Print the document text
print(doc.text)

#Predicting linguistic annotations

for token in doc:
    token_text = token.text
    token_pos = token.pos_
    token_dep = token.dep_
    
    print(f"{token_text:<12}{token_pos:<10}{token_dep:<10}")

#Predicting named entities in context

import spacy
from spacy import displacy

nlp = spacy.load('en_core_web_sm')
text = "The world is a better place with the application of science and technology. Natural language is ambiguous. As humans, we can easily disambiguate the meaning of linguistic units."

doc = nlp(text)
displacy.render(doc, style='ent')

#Using the Matcher
import spacy
from spacy.matcher import Matcher

nlp = spacy.load("en_core_web_sm")
doc = nlp("Upcoming iPhone X release date leaked as Apple reveals pre-orders")

matcher = Matcher(nlp.vocab)

pattern = [{'TEXT': 'iPhone'}, {'TEXT': 'X'}]
matcher.add('IPHONE_X_PATTERN', None, pattern)

matches = matcher(doc)
print("Matches:", [doc[start:end].text for match_id, start, end in matches])

#Writing match patterns

import spacy
from spacy.matcher import Matcher

nlp = spacy.load("en_core_web_sm")
matcher = Matcher(nlp.vocab)

doc = nlp(
    "After making the iOS update you won't notice a radical system-wide "
    "redesign: nothing like the aesthetic upheaval we got with iOS 7. Most of "
    "iOS 11's furniture remains the same as in iOS 10. But you will discover "
    "some tweaks once you delve a little deeper."
)

pattern = [{"TEXT": "iOS"}, {"IS_DIGIT": True}]

matcher.add("IOS_VERSION_PATTERN", None, pattern)
matches = matcher(doc)
print("Total matches found: ", len(matches))

for match_id, start, end in matches:
    print("Match Found: ", doc[start:end].text)

import spacy
from spacy.matcher import Matcher

nlp = spacy.load("en_core_web_sm")
matcher = Matcher(nlp.vocab)

doc = nlp(
    "i downloaded Fortnite on my laptop and can't open the game at all. Help? "
    "so when I was downloading Minecraft, I got the Windows version where it "
    "is the '.zip' folder and I used the default program to unpack it... do "
    "I also need to download Winzip?"
)

pattern = [{'LEMMA': 'download'}, {'POS': 'PROPN'}]
matcher.add('DOWNLOAD_THINGS_PATTERN', None, pattern)
matches = matcher(doc)

print("Total matches found: ", len(matches))

for match_id, start, end in matches:
    print("Match Found: ", doc[start:end].text)